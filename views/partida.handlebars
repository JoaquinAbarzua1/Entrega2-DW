<header>
        <h1>Tablero Ajedrez</h1>
    </header>

    <div class="tablero piezas">
        <div class="blanco a8">
            <span class="pieza negra" style="font-size: 2.5rem;"
                data-info='{"tipo":"torre","color":"negra","x":0,"y":0}'>
                {{> torre}}
            </span>
        </div>
        <div class="negro b8" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"caballo","color":"negra","x":1,"y":0}'>
                {{>caballo}}
            </span>
        </div>
        <div class="blanco c8" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"alfil","color":"negra","x":2,"y":0}'>
                {{>alfil}}
            </span>
        </div>
        <div class="negro d8" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"reina","color":"negra","x":3,"y":0}'>
                {{>reina}}
            </span>
        </div>
        <div class="blanco e8" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"rey","color":"negra","x":4,"y":0}'>
                {{>rey}}
            </span>
        </div>
        <div class="negro f8" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"alfil","color":"negra","x":5,"y":0}'>
                {{>alfil}}
            </span>
        </div>
        <div class="blanco g8" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"caballo","color":"negra","x":6,"y":0}'>
                {{>caballo}}
            </span>
        </div>
        <div class="negro h8" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"torre","color":"negra","x":7,"y":0}'>
                {{>torre}}
            </span>
        </div>

        <div class="negro a7" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"negra","x":0,"y":1}'>
                {{>peon}}
            </span>
        </div>
        <div class="blanco b7">
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"negra","x":1,"y":1}'>
                {{>peon}}
            </span>
        </div>
        <div class="negro c7" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"negra","x":2,"y":1}'>
                {{>peon}}
            </span>
        </div>
        <div class="blanco d7" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"negra","x":3,"y":1}'>
                {{>peon}}
            </span>
        </div>
        <div class="negro e7" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"negra","x":4,"y":1}'>
                {{>peon}}
            </span>
        </div>
        <div class="blanco f7" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"negra","x":5,"y":1}'>
                {{>peon}}
            </span>
        </div>
        <div class="negro h7" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"negra","x":6,"y":1}'>
                {{>peon}}
            </span>
        </div>
        <div class="blanco g7" >
            <span class="pieza negra" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"negra","x":7,"y":1}'>
                {{>peon}}
            </span>
        </div>

        <div class="blanco a6"></div>
        <div class="negro b6"></div>
        <div class="blanco c6"></div>
        <div class="negro d6"></div>
        <div class="blanco e6"></div>
        <div class="negro f6"></div>
        <div class="blanco g6"></div>
        <div class="negro h6"></div>

        <div class="negro a5"></div>
        <div class="blanco b5"></div>
        <div class="negro c5"></div>
        <div class="blanco d5"></div>
        <div class="negro e5"></div>
        <div class="blanco f5"></div>
        <div class="negro g5"></div>
        <div class="blanco h5"></div>

        <div class="blanco a4"></div>
        <div class="negro b4"></div>
        <div class="blanco c4"></div>
        <div class="negro d4"></div>
        <div class="blanco e4"></div>
        <div class="negro f4"></div>
        <div class="blanco g4"></div>
        <div class="negro h4"></div>

        <div class="negro a3"></div>
        <div class="blanco b3"></div>
        <div class="negro c3"></div>
        <div class="blanco d3"></div>
        <div class="negro e3"></div>
        <div class="blanco f3"></div>
        <div class="negro g3"></div>
        <div class="blanco h3"></div>


        <div class="blanco a2">
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"blanca","x":0,"y":6}'>
                {{>peon color="blanca"}}
            </span>
        </div>
        <div class="negro b2" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"blanca","x":1,"y":6}'>
                {{>peon color="blanca"}}
            </span>
        </div>
        <div class="blanco c2" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"blanca","x":2,"y":6}'>
                {{>peon color="blanca"}}
            </span>
        </div>
        <div class="negro d2">
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"blanca","x":3,"y":6}'>
                {{>peon color="blanca"}}
            </span>
        </div>
        <div class="blanco e2" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"blanca","x":4,"y":6}'>
                {{>peon color="blanca"}}
            </span>
        </div>
        <div class="negro f2" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"blanca","x":5,"y":6}'
        >
                {{>peon color="blanca"}}
            </span>
        </div>
        <div class="blanco g2" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"blanca","x":6,"y":6}'>
                {{>peon color="blanca"}}
            </span>
        </div>
        <div class="negro h2" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"peon","color":"blanca","x":7,"y":6}'>
                {{>peon color="blanca"}}
            </span>
        </div>

        <div class="negro a1 " >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"torre","color":"blanca","x":0,"y":7}'>
                {{>torre color="blanca"}}
            </span>
        </div>
        <div class="blanco b1" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"caballo","color":"blanca","x":1,"y":7}'>
                {{>caballo color="blanca"}}
            </span>
        </div>
        <div class="negro c1" >
            <span class="pieza blanca" style="font-size: 2.5rem;" 
            data-info='{"tipo":"alfil","color":"blanca","x":2,"y":7}'>
                {{>alfil color="blanca"}}
            </span>
        </div>
        <div class="blanco d1" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"reina","color":"blanca","x":3,"y":7}'>
                {{>reina color="blanca"}}
            </span>
        </div>
        <div class="negro e1" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"rey","color":"blanca","x":4,"y":7}'>
                {{>rey color="blanca"}}
            </span>
        </div>
        <div class="blanco f1" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"alfil","color":"blanca","x":5,"y":7}'>
                {{>alfil color="blanca"}}
            </span>
        </div>
        <div class="negro g1" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"caballo","color":"blanca","x":6,"y":7}'>
                {{>caballo color="blanca"}}
            </span>
        </div>
        <div class="cuadro blanco h1" >
            <span class="pieza blanca" style="font-size: 2.5rem;"
            data-info='{"tipo":"torre","color":"blanca","x":7,"y":7}'>
                {{>torre color="blanca"}}
            </span>
        </div>
    </div>

    <div class="jugador-info">
        <p>TÃº: Invitado</p>
      </div>

      <div class="controles-partida">
        <p class="turno-indicador">Turno: </p>
        <button class="boton-partida">Rendirse</button>
        <button class="boton-partida">Empatar</button>
        <button class="boton-partida">Nueva Partida</button>
      </div>

      <div class="movimientos">
        <h3>Movimientos</h3>
        <ol>
          <li>e4 e5</li>
          <li>Cf3 Cc6</li>
        </ol>
      </div>

      <div class="invitar-jugador">
        <h3>Invitar</h3>
        <input type="email" placeholder="Correo del amigo" />
        <button class="boton-partida">Invitar</button>
      </div>
    </main>

    <footer>
      <nav>
        <a href="historia">Historia</a>
        <a href="desarrolladores">Desarrolladores</a>
      </nav>
    </footer> 

        {{! FUNCIONES DE MOVIMIENTO}}

    <script>
        function movimientosCaballo(x, y) {
    const movimientos = [
      [2, 1], [1, 2],
      [-1, 2], [-2, 1],
      [-2, -1], [-1, -2],
      [1, -2], [2, -1]
    ];
  
    const movimientosValidos = [];
  
    for (const [dx, dy] of movimientos) {
      const nx = x + dx;
      const ny = y + dy;
  
      // Verificar si estÃ¡ dentro del tablero
      if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
        movimientosValidos.push([nx, ny]);
      }
    }
  
    return movimientosValidos;
}
function movimientosAlfil(x, y) {
    const movimientos = [];
  
    for (let i = 1; i < 8; i++) {
      if (x + i < 8 && y + i < 8) movimientos.push([x + i, y + i]);
      if (x - i >= 0 && y + i < 8) movimientos.push([x - i, y + i]);
      if (x + i < 8 && y - i >= 0) movimientos.push([x + i, y - i]);
      if (x - i >= 0 && y - i >= 0) movimientos.push([x - i, y - i]);
    }
  
    return movimientos;
}

function movimientosTorre(x, y) {
    const movimientos = [];
  
    for (let i = 0; i < 8; i++) {
      if (i !== x) movimientos.push([i, y]); // Horizontal
      if (i !== y) movimientos.push([x, i]); // Vertical
    }
  
    return movimientos;
  }
  

function movimientosReina(x, y) {
    return [...movimientosTorre(x, y), ...movimientosAlfil(x, y)];
}

function movimientosRey(x, y) {
    const movimientos = [];
  
    for (let dx = -1; dx <= 1; dx++) {
      for (let dy = -1; dy <= 1; dy++) {
        if (dx === 0 && dy === 0) continue;
        const nx = x + dx, ny = y + dy;
        if (nx >= 0 && ny >= 0 && nx < 8 && ny < 8) {
          movimientos.push([nx, ny]);
        }
      }
    }
  
    return movimientos;
}

function movimientosPeon(x, y, color = 'blanca') {
    const dir = color === 'blanca' ? -1 : 1;
    const inicioFila = color === 'blanca' ? 6 : 1;
    const movimientos = [];
  
    const ny = y + dir;
    if (ny >= 0 && ny < 8) {
      movimientos.push([x, ny]); // Movimiento normal
      if (y === inicioFila && ny + dir >= 0 && ny + dir < 8) {
        movimientos.push([x, ny + dir]); // Doble avance
      }
    }
  
    // Capturas diagonales (no consideramos piezas enemigas por ahora)
    if (x > 0 && ny >= 0 && ny < 8) movimientos.push([x - 1, ny]);
    if (x < 7 && ny >= 0 && ny < 8) movimientos.push([x + 1, ny]);
  
    return movimientos;
}
    </script>

 {{! FUNCIONES PARA DRAG & DROP.......}}

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.pieza').forEach(pieza => { 
// querySelectorAll: Cadena de texto que contiene un selector CSS vÃ¡lido, como un ID, clase, nombre de etiqueta, o cualquier combinador CSS.
// En este caso seleccionas todos los elementos de la clase "pieza" 

        pieza.setAttribute('draggable', 'true');
        });
    });

    let x = 1;
    let pos = 0;
    let y = ["a", "b", "c", "d", "e", "f", "g"];
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.cuadro').forEach(pieza => {
            cuadro.classList.add(y[pos]+x);
            if(x <= 8){
                x++;
            }
            else{
                pos++;
            }
        });
    });
    
    document.addEventListener('DOMContentLoaded', () => {
        var tablero = document.querySelector('.tablero');

        for(let i = 0; i<8; i++){
            for(let j = 0; j<8; j++){
            for(let i = 0; i<8; i++){
            
        }
            }
        }
    });
    </script>

    
    <script>
        document.addEventListener("DOMContentLoaded", function () {
        let piezaArrastrada = null;
        let posInicial = null;

        // Cuando empieza a arrastrar una pieza
        document.querySelectorAll(".pieza").forEach(pieza => {
        pieza.addEventListener("dragstart", (e) => {
            piezaArrastrada = pieza;
            posInicial = pieza.parentElement.className.match(/([a-h][1-8])/)[0]; // Ej: "a8"
            setTimeout(() => pieza.style.display = "none", 0);
        });

        pieza.addEventListener("dragend", (e) => {
            pieza.style.display = "";
        });
        });

// Convertir posiciÃ³n "a8" a coordenadas [x, y] (ej: "a8" â [0, 0])
    function posicionACoordenadas(pos) {
        const x = pos.charCodeAt(0) - 'a'.charCodeAt(0); // a=0, b=1, ..., h=7
        const y = 8 - parseInt(pos[1]); // 8=0, 7=1, ..., 1=7
        return [x, y];
    }
        // Habilita cada casilla como zona de "soltar"
        document.querySelectorAll(".tablero > div").forEach(casilla => {
        casilla.addEventListener("dragover", (e) => {
            e.preventDefault(); // Necesario para permitir drop
        });

        casilla.addEventListener("drop", (e) => {
            e.preventDefault();
            if (!piezaArrastrada) return;

            const posDestino = casilla.className.match(/([a-h][1-8])/)[0]; // Ej: "b6"
            const [xInicial, yInicial] = posicionACoordenadas(posInicial);
            const [xDestino, yDestino] = posicionACoordenadas(posDestino);

            // Obtener tipo y color de la pieza (desde data-info o clases)
            const tipoPieza = piezaArrastrada.getAttribute('data-info') // ocupas el data-info
                ? JSON.parse(piezaArrastrada.getAttribute('data-info')).tipo 
                : piezaArrastrada.textContent.trim().toLowerCase(); // Por si no hay data-info
            const colorPieza = piezaArrastrada.classList.contains('negra') ? 'negra' : 'blanca';

            // Verificar movimiento vÃ¡lido
            let movimientosValidos = [];
            switch (tipoPieza) {
                case 'caballo':
                    movimientosValidos = movimientosCaballo(xInicial, yInicial);
                    break;
                case 'alfil':
                    movimientosValidos = movimientosAlfil(xInicial, yInicial);
                    break;
                case 'torre':
                    movimientosValidos = movimientosTorre(xInicial, yInicial);
                    break;
                case 'reina':
                    movimientosValidos = movimientosReina(xInicial, yInicial);
                    break;
                case 'rey':
                    movimientosValidos = movimientosRey(xInicial, yInicial);
                    break;
                case 'peon':
                    movimientosValidos = movimientosPeon(xInicial, yInicial, colorPieza);
                    break;
            }

            // Verificar si el destino estÃ¡ en movimientos vÃ¡lidos
            const movimientoPermitido = movimientosValidos.some(([x, y]) => 
                x === xDestino && y === yDestino
            );

            // Verificar si hay una pieza del mismo color en el destino
            const piezaDestino = casilla.querySelector('.pieza');
            const mismoColor = piezaDestino && piezaDestino.classList.contains(colorPieza);

            // Evita que se agregue mÃ¡s de una pieza en la misma casilla
            if(movimientoPermitido && !mismoColor){
            casilla.innerHTML = "";
            casilla.appendChild(piezaArrastrada);

            }

            piezaArrastrada = null;
            posInicial = null;
            
        });
        });
    });
    </script>


    
    
